# Recursive Functions

Welcome! In this video, we'll explore recursive functionsâ€”a powerful programming concept where a function calls itself to break down a problem into smaller, more manageable pieces.

We'll use a classic example: the factorial function. As you see, the factorial of 'n' is defined as 'n' times the factorial of 'n-1'. To prevent this from going on forever, we need a base case: the factorial of 0 is 1.

Now let's watch this in action by calculating the factorial of 4. First, the main function `factorial(4)` is called. Because it can't resolve on its own, it calls `factorial(3)`. This continues down the line, creating a call stack, until we reach our base case, `factorial(0)`.

Once the base case is highlighted, it returns the value 1. Watch as this value is passed up to the `factorial(1)` call. That frame then computes its result, 1 times 1, and resolves to 1. This new value is passed to the `factorial(2)` call, which computes 2 times 1 and resolves to 2. This unwinding process continues up the call stack. `factorial(3)` receives the 2 and resolves to 6. Finally, the `factorial(4)` call receives the 6, computes 4 times 6, and resolves to our final answer, 24, which is highlighted to complete the process.

To summarize, every recursive function has two essential components. First, the base case, which is a simple condition that stops the recursion. Second, the recursive step, where the function calls itself with an input that moves it closer to the base case. By combining these two parts, recursion can solve complex problems in an elegant way.
